template <class T>
struct SparseTable
{
    static const int MAXN = 1e5;
    static const int MAXLOG = ceil(log2(MAXN));

    SparseTable(function<T(T, T)> f) : f(f)
    {}

    void init(const vector<T>& array)
    {
        for (int i = 0; i < array.size(); i++)
        {
            sparse[0][i] = array[i];
        }
        for (int j = 1; j < MAXLOG; j++)
        {
            for (int i = 0; i < array.size(); i++)
            {
                sparse[j][i] = sparse[j - 1][i];
                int t = i + (1 << (j - 1));
                if (t < array.size()) sparse[j][i] = f(sparse[j][i], sparse[j - 1][t]);
            }
        }
    }

    T get(int l, int r)
    {
        if (l > r) swap(l, r);
        int k = floor(log2(r - l));
        return f(sparse[k][l], sparse[k][r - (1 << k)]);
    }

private:
    function<T(T, T)> f;
    T sparse[MAXLOG][MAXN];
};

SparseTable<int> sparseTable([](int a, int b){return min(a, b);});
